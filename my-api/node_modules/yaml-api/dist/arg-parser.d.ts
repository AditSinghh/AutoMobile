interface ArgumentOptions {
    defaultValue?: any;
    required?: boolean;
}
interface Argument extends ArgumentOptions {
    names: string[];
    optionName: string;
    description: string;
}
interface ArgumentValue {
    [name: string]: any;
}
export declare class ArgParser {
    protected positional: Argument[];
    protected optional: Argument[];
    protected values: ArgumentValue;
    protected binary: string;
    constructor(binary?: string);
    add(names: string | string[], description?: string, options?: ArgumentOptions): this;
    set(name: string, value: any): void;
    get(name: string): any;
    parse(argv: string[]): void;
    validateArguments(): void;
    showHelp(prologue?: string, epilogue?: string): void;
    getCommandLineUsage(): string;
    protected printAligned(text: string, identLevel?: number, alignment?: number, posText?: string): void;
    protected getShortestName(argument: Argument): string;
    protected isOptional(argument: string): boolean;
    protected findOptionalArgument(name: string): Argument | undefined;
    protected parseArgName(names: string[]): string;
}
export {};
