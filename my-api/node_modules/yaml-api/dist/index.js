#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var express = require("express");
var rest_yaml_1 = require("./rest-yaml");
var arg_parser_1 = require("./arg-parser");
var beatiful_try_1 = require("./utils/beatiful-try");
__exportStar(require("./rest-yaml"), exports);
beatiful_try_1.beautifulTry.helpMessage = 'See help: yaml-api --help';
var args = new arg_parser_1.ArgParser('yaml-api');
args
    .add(['--help', '-h'], 'Show this help message')
    .add(['--list', '-l'], 'Only list the endpoints of the given YAML file')
    .add('filename', 'The YAML full or relative file path', { required: true })
    .add('address', 'The address:port to bind the API', { defaultValue: ':3000' });
(0, beatiful_try_1.beautifulTry)(function () { return args.parse(process.argv); });
if (args.get('help')) {
    args.showHelp('Developed by Luiz Felipe <felipe.silva337@yahoo.com>\n' +
        'Version 1.0.2 - Distributed under the MIT License.\n');
    process.exit(0);
}
(0, beatiful_try_1.beautifulTry)(function () { return args.validateArguments(); });
if (!fs.existsSync(args.get('filename'))) {
    console.error("File '".concat(args.get('filename'), "' not found."));
    process.exit(1);
}
var api = new rest_yaml_1.RestYAML();
if (args.get('list')) {
    api.readDataFile(args.get('filename'));
    api.showEndpoints();
    process.exit(0);
}
api.watchDataFile(args.get('filename'));
var app = express();
api.bind(app);
var _a = args.get('address').split(':'), address = _a[0], port = _a[1];
app.listen(port, address || '0.0.0.0')
    .on('error', function () {
    console.error("ERROR: Unable to bind address ".concat(address, ":").concat(port));
    process.exit(1);
})
    .on('listening', function () {
    api.log("Started API on address ".concat(address, ":").concat(port));
});
