import { Application, NextFunction, RequestHandler, Router } from 'express';
interface Headers {
    [header: string]: string;
}
interface RestEndpoint {
    status?: number;
    headers?: Headers;
    content?: string | object;
    file?: string;
    handler?: string;
}
interface RestRoute {
    copy?: RestEndpoint;
    delete?: RestEndpoint;
    get?: RestEndpoint;
    head?: RestEndpoint;
    lock?: RestEndpoint;
    merge?: RestEndpoint;
    options?: RestEndpoint;
    patch?: RestEndpoint;
    post?: RestEndpoint;
    put?: RestEndpoint;
    trace?: RestEndpoint;
}
interface RestOptions {
    debug?: boolean;
    envFile?: string;
    logDir?: string;
}
export interface RestData {
    [route: string]: RestRoute;
}
export interface RestEnvironment {
    [variable: string]: any;
}
export declare class RestYAML {
    private data?;
    private defaultOptions;
    private environment;
    private options;
    private router?;
    constructor(data?: RestData, options?: RestOptions);
    setOptions(options: RestOptions): void;
    readDataFile(file: string): void;
    watchDataFile(file: string): void;
    showEndpoints(): void;
    updateData(data: RestData): void;
    bind(app: Application): void;
    protected handler(req: any, res: any, next: NextFunction): void;
    makeRouter(): Promise<void>;
    protected bindEndpoint(router: Router, method: string, route: string, endpoint?: RestEndpoint): Promise<void>;
    protected transformRoute(route: string): string;
    protected getEndpointHandler(endpoint: RestEndpoint): Promise<RequestHandler>;
    protected replaceVars(req: any, content: string | object): string;
    protected errorHandler(res: any, status: number, error?: Error, message?: string): void;
    log(message: string): void;
    rawLog(text: string): void;
}
export {};
