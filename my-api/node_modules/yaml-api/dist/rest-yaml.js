"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RestYAML = void 0;
var fs = require("fs");
var path = require("path");
var dotenv = require("dotenv");
var YAML = require("yaml");
var express_1 = require("express");
var date_format_1 = require("./utils/date-format");
var ansi_1 = require("@silva97/ansi");
var errors_1 = require("./errors");
var RestYAML = (function () {
    function RestYAML(data, options) {
        this.updateData(data);
        this.defaultOptions = {
            debug: false,
            envFile: '.env',
            logDir: './logs',
        };
        if (options) {
            this.setOptions(options);
        }
    }
    RestYAML.prototype.setOptions = function (options) {
        var _a, _b, _c;
        var parseBoolean = function (value) { return value && value != 'false'; };
        this.options = {
            debug: parseBoolean((_a = options === null || options === void 0 ? void 0 : options.debug) !== null && _a !== void 0 ? _a : this.defaultOptions.debug),
            envFile: (_b = options === null || options === void 0 ? void 0 : options.envFile) !== null && _b !== void 0 ? _b : this.defaultOptions.envFile,
            logDir: (_c = options === null || options === void 0 ? void 0 : options.logDir) !== null && _c !== void 0 ? _c : this.defaultOptions.logDir,
        };
    };
    RestYAML.prototype.readDataFile = function (file) {
        this.updateData(YAML.parse(fs.readFileSync(file, 'utf-8')));
    };
    RestYAML.prototype.watchDataFile = function (file) {
        var _this = this;
        var reload = function () { return __awaiter(_this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.environment = (_a = dotenv.config().parsed) !== null && _a !== void 0 ? _a : {};
                        this.readDataFile(file);
                        return [4, this.makeRouter()];
                    case 1:
                        _b.sent();
                        return [2];
                }
            });
        }); };
        reload();
        var loader = function (currentState) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!currentState.size) {
                            return [2];
                        }
                        this.log("Reloading routes from '".concat(file, "'..."));
                        return [4, reload()];
                    case 1:
                        _a.sent();
                        this.log('Successful reloaded the routes.');
                        return [2];
                }
            });
        }); };
        fs.watchFile(file, loader);
        fs.watchFile(this.options.envFile, loader);
    };
    RestYAML.prototype.showEndpoints = function () {
        var show = function (method, route, endpoint) {
            if (!endpoint) {
                return;
            }
            console.log((0, ansi_1.ansi)(templateObject_1 || (templateObject_1 = __makeTemplateObject(["%{bold}", "%{normal} ", ""], ["%{bold}", "%{normal} ", ""])), method, route));
        };
        for (var route in this.data) {
            var restRoute = this.data[route];
            show('COPY', route, restRoute.copy);
            show('DELETE', route, restRoute.delete);
            show('GET', route, restRoute.get);
            show('HEAD', route, restRoute.head);
            show('LOCK', route, restRoute.lock);
            show('MERGE', route, restRoute.merge);
            show('OPTIONS', route, restRoute.options);
            show('PATCH', route, restRoute.patch);
            show('POST', route, restRoute.post);
            show('PUT', route, restRoute.put);
            show('TRACE', route, restRoute.trace);
        }
    };
    RestYAML.prototype.updateData = function (data) {
        this.data = data;
    };
    RestYAML.prototype.bind = function (app) {
        app.use(this.handler.bind(this));
        app.use(function (request, response) {
            response
                .status(404)
                .send({
                message: 'Route not found',
            });
        });
    };
    RestYAML.prototype.handler = function (req, res, next) {
        if (!this.router) {
            next();
        }
        this.router(req, res, next);
        this.log("Request from ".concat(req.ip, " -> ").concat(req.method, " ").concat(req.url, " | Response ").concat(res.statusCode));
    };
    RestYAML.prototype.makeRouter = function () {
        return __awaiter(this, void 0, void 0, function () {
            var router, _a, _b, _i, route, options, restRoute;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        router = (0, express_1.Router)();
                        this.options = Object.assign({}, this.defaultOptions);
                        _a = [];
                        for (_b in this.data)
                            _a.push(_b);
                        _i = 0;
                        _c.label = 1;
                    case 1:
                        if (!(_i < _a.length)) return [3, 14];
                        route = _a[_i];
                        if (route == 'options') {
                            options = this.replaceVars(null, this.data[route]);
                            this.setOptions(JSON.parse(options));
                            return [3, 13];
                        }
                        restRoute = this.data[route];
                        return [4, this.bindEndpoint(router, 'COPY', route, restRoute.copy)];
                    case 2:
                        _c.sent();
                        return [4, this.bindEndpoint(router, 'DELETE', route, restRoute.delete)];
                    case 3:
                        _c.sent();
                        return [4, this.bindEndpoint(router, 'GET', route, restRoute.get)];
                    case 4:
                        _c.sent();
                        return [4, this.bindEndpoint(router, 'HEAD', route, restRoute.head)];
                    case 5:
                        _c.sent();
                        return [4, this.bindEndpoint(router, 'LOCK', route, restRoute.lock)];
                    case 6:
                        _c.sent();
                        return [4, this.bindEndpoint(router, 'MERGE', route, restRoute.merge)];
                    case 7:
                        _c.sent();
                        return [4, this.bindEndpoint(router, 'OPTIONS', route, restRoute.options)];
                    case 8:
                        _c.sent();
                        return [4, this.bindEndpoint(router, 'PATCH', route, restRoute.patch)];
                    case 9:
                        _c.sent();
                        return [4, this.bindEndpoint(router, 'POST', route, restRoute.post)];
                    case 10:
                        _c.sent();
                        return [4, this.bindEndpoint(router, 'PUT', route, restRoute.put)];
                    case 11:
                        _c.sent();
                        return [4, this.bindEndpoint(router, 'TRACE', route, restRoute.trace)];
                    case 12:
                        _c.sent();
                        _c.label = 13;
                    case 13:
                        _i++;
                        return [3, 1];
                    case 14:
                        this.router = router;
                        return [2];
                }
            });
        });
    };
    RestYAML.prototype.bindEndpoint = function (router, method, route, endpoint) {
        return __awaiter(this, void 0, void 0, function () {
            var finalRoute, _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9;
            return __generator(this, function (_10) {
                switch (_10.label) {
                    case 0:
                        if (!endpoint) {
                            return [2];
                        }
                        finalRoute = this.transformRoute(route);
                        _a = method;
                        switch (_a) {
                            case 'COPY': return [3, 1];
                            case 'DELETE': return [3, 3];
                            case 'GET': return [3, 5];
                            case 'HEAD': return [3, 7];
                            case 'LOCK': return [3, 9];
                            case 'MERGE': return [3, 11];
                            case 'OPTIONS': return [3, 13];
                            case 'PATCH': return [3, 15];
                            case 'POST': return [3, 17];
                            case 'PUT': return [3, 19];
                            case 'TRACE': return [3, 21];
                        }
                        return [3, 23];
                    case 1:
                        _c = (_b = router).copy;
                        _d = [finalRoute];
                        return [4, this.getEndpointHandler(endpoint)];
                    case 2:
                        _c.apply(_b, _d.concat([_10.sent()]));
                        return [3, 23];
                    case 3:
                        _f = (_e = router).delete;
                        _g = [finalRoute];
                        return [4, this.getEndpointHandler(endpoint)];
                    case 4:
                        _f.apply(_e, _g.concat([_10.sent()]));
                        return [3, 23];
                    case 5:
                        _j = (_h = router).get;
                        _k = [finalRoute];
                        return [4, this.getEndpointHandler(endpoint)];
                    case 6:
                        _j.apply(_h, _k.concat([_10.sent()]));
                        return [3, 23];
                    case 7:
                        _m = (_l = router).head;
                        _o = [finalRoute];
                        return [4, this.getEndpointHandler(endpoint)];
                    case 8:
                        _m.apply(_l, _o.concat([_10.sent()]));
                        return [3, 23];
                    case 9:
                        _q = (_p = router).lock;
                        _r = [finalRoute];
                        return [4, this.getEndpointHandler(endpoint)];
                    case 10:
                        _q.apply(_p, _r.concat([_10.sent()]));
                        return [3, 23];
                    case 11:
                        _t = (_s = router).merge;
                        _u = [finalRoute];
                        return [4, this.getEndpointHandler(endpoint)];
                    case 12:
                        _t.apply(_s, _u.concat([_10.sent()]));
                        return [3, 23];
                    case 13:
                        _w = (_v = router).options;
                        _x = [finalRoute];
                        return [4, this.getEndpointHandler(endpoint)];
                    case 14:
                        _w.apply(_v, _x.concat([_10.sent()]));
                        return [3, 23];
                    case 15:
                        _z = (_y = router).patch;
                        _0 = [finalRoute];
                        return [4, this.getEndpointHandler(endpoint)];
                    case 16:
                        _z.apply(_y, _0.concat([_10.sent()]));
                        return [3, 23];
                    case 17:
                        _2 = (_1 = router).post;
                        _3 = [finalRoute];
                        return [4, this.getEndpointHandler(endpoint)];
                    case 18:
                        _2.apply(_1, _3.concat([_10.sent()]));
                        return [3, 23];
                    case 19:
                        _5 = (_4 = router).put;
                        _6 = [finalRoute];
                        return [4, this.getEndpointHandler(endpoint)];
                    case 20:
                        _5.apply(_4, _6.concat([_10.sent()]));
                        return [3, 23];
                    case 21:
                        _8 = (_7 = router).trace;
                        _9 = [finalRoute];
                        return [4, this.getEndpointHandler(endpoint)];
                    case 22:
                        _8.apply(_7, _9.concat([_10.sent()]));
                        return [3, 23];
                    case 23: return [2];
                }
            });
        });
    };
    RestYAML.prototype.transformRoute = function (route) {
        return route.replace(/\{([a-z0-9_]+)\}/gi, function (match, variable) {
            return ':' + variable;
        });
    };
    RestYAML.prototype.getEndpointHandler = function (endpoint) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var status, headers;
            var _this = this;
            return __generator(this, function (_b) {
                status = (_a = endpoint.status) !== null && _a !== void 0 ? _a : 200;
                headers = {
                    'Content-Type': 'application/json',
                    'X-Powered-By': 'Express + yaml-api',
                };
                if (endpoint.headers) {
                    Object.assign(headers, endpoint.headers);
                }
                if (endpoint.content) {
                    return [2, function (req, res) { return res
                            .header(headers)
                            .status(status)
                            .send(_this.replaceVars(req, endpoint.content)); }];
                }
                if (endpoint.file) {
                    return [2, function (req, res) {
                            var fileContent;
                            if (!fs.existsSync(endpoint.file)) {
                                var error = new errors_1.FileNotFound(endpoint.file);
                                _this.rawLog(error.stack);
                                _this.errorHandler(res, 500, error);
                                return;
                            }
                            fileContent = fs.readFileSync(endpoint.file, 'utf-8');
                            res
                                .header(headers)
                                .status(status)
                                .send(fileContent);
                        }];
                }
                if (endpoint.handler) {
                    return [2, function (req, res) { return __awaiter(_this, void 0, void 0, function () {
                            var handler, e_1;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        _a.trys.push([0, 2, , 3]);
                                        return [4, Promise.resolve().then(function () { return require(path.join(process.cwd(), endpoint.handler)); })];
                                    case 1:
                                        handler = _a.sent();
                                        res.header(headers);
                                        handler(req, res, this.environment);
                                        return [3, 3];
                                    case 2:
                                        e_1 = _a.sent();
                                        this.rawLog(e_1.stack);
                                        this.errorHandler(res, 500, e_1);
                                        return [3, 3];
                                    case 3: return [2];
                                }
                            });
                        }); }];
                }
                return [2, function (req, res) { return res.header(headers).status(status).send(); }];
            });
        });
    };
    RestYAML.prototype.replaceVars = function (req, content) {
        var _this = this;
        if (typeof content == 'object') {
            content = JSON.stringify(content);
        }
        content = content.replace(/\$\{([a-z0-9_]+)\}/gi, function (match, name) {
            var _a, _b, _c;
            return (_c = (_b = (_a = req === null || req === void 0 ? void 0 : req.params[name]) !== null && _a !== void 0 ? _a : _this.environment[name]) !== null && _b !== void 0 ? _b : process.env[name]) !== null && _c !== void 0 ? _c : '';
        });
        return content;
    };
    RestYAML.prototype.errorHandler = function (res, status, error, message) {
        var _a;
        message = message !== null && message !== void 0 ? message : 'Internal server error.';
        if (this.options.debug) {
            res
                .status(status)
                .send({
                message: message,
                error: (_a = error === null || error === void 0 ? void 0 : error.stack.split('\n')) !== null && _a !== void 0 ? _a : null,
            });
            return;
        }
        res
            .status(status)
            .send({
            message: message,
        });
    };
    RestYAML.prototype.log = function (message) {
        var date = new date_format_1.DateFormat();
        this.rawLog((0, ansi_1.ansi)(templateObject_2 || (templateObject_2 = __makeTemplateObject(["[%{bold;f.blue}API%{normal}] ", " - %{bold}", ""], ["[%{bold;f.blue}API%{normal}] ", " - %{bold}", ""])), date.getFullTime(), message));
    };
    RestYAML.prototype.rawLog = function (text) {
        var date = new date_format_1.DateFormat();
        var filename = date.getFullDate() + '.log';
        console.log(text);
        fs.mkdirSync(this.options.logDir, {
            recursive: true,
        });
        fs.appendFileSync(path.join(this.options.logDir, filename), (0, ansi_1.purify)(text) + '\n', 'utf-8');
    };
    return RestYAML;
}());
exports.RestYAML = RestYAML;
var templateObject_1, templateObject_2;
