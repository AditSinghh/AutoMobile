"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArgParser = void 0;
var errors_1 = require("./errors");
var ARG_INVALID_STATUS = 2;
var ArgParser = (function () {
    function ArgParser(binary) {
        if (binary === void 0) { binary = './bin'; }
        this.positional = [];
        this.optional = [];
        this.values = {};
        this.binary = binary;
    }
    ArgParser.prototype.add = function (names, description, options) {
        var _a;
        if (typeof names == 'string') {
            names = [names];
        }
        var argument = {
            names: names,
            optionName: this.parseArgName(names),
            defaultValue: options === null || options === void 0 ? void 0 : options.defaultValue,
            description: description !== null && description !== void 0 ? description : '',
            required: (_a = options === null || options === void 0 ? void 0 : options.required) !== null && _a !== void 0 ? _a : false,
        };
        if (this.isOptional(names[0])) {
            this.optional.push(argument);
            this.set(argument.optionName, (options === null || options === void 0 ? void 0 : options.defaultValue) || false);
        }
        else {
            this.positional.push(argument);
            var value = (options === null || options === void 0 ? void 0 : options.defaultValue)
                ? String(options === null || options === void 0 ? void 0 : options.defaultValue)
                : options === null || options === void 0 ? void 0 : options.defaultValue;
            this.set(argument.optionName, value);
        }
        return this;
    };
    ArgParser.prototype.set = function (name, value) {
        this.values[name] = value;
    };
    ArgParser.prototype.get = function (name) {
        var _a;
        return (_a = this.values[name]) !== null && _a !== void 0 ? _a : undefined;
    };
    ArgParser.prototype.parse = function (argv) {
        argv = argv.slice(2);
        var position = 0;
        for (var _i = 0, argv_1 = argv; _i < argv_1.length; _i++) {
            var param = argv_1[_i];
            if (this.isOptional(param)) {
                var arg_1 = this.findOptionalArgument(param);
                if (!arg_1) {
                    throw new errors_1.InvalidOption(param);
                }
                this.set(arg_1.optionName, !arg_1.defaultValue);
                continue;
            }
            if (this.positional.length <= position) {
                continue;
            }
            var arg = this.positional[position++];
            this.set(arg.optionName, param);
        }
    };
    ArgParser.prototype.validateArguments = function () {
        for (var position = 0; position < this.positional.length; position++) {
            var argument = this.positional[position];
            if (argument.required && !this.get(argument.optionName)) {
                throw new errors_1.UndefinedArgument(argument.names[0]);
            }
        }
    };
    ArgParser.prototype.showHelp = function (prologue, epilogue) {
        var alignment = 16;
        if (prologue) {
            console.log(prologue + '\n');
        }
        console.log('USAGE');
        this.printAligned(this.getCommandLineUsage() + '\n', 2);
        for (var _i = 0, _a = this.optional; _i < _a.length; _i++) {
            var arg = _a[_i];
            this.printAligned(arg.names.join(','), 2, alignment, arg.description);
        }
        console.log('\nPOSITIONAL');
        for (var _b = 0, _c = this.positional; _b < _c.length; _b++) {
            var arg = _c[_b];
            var defaultText = arg.defaultValue
                ? " (default: '".concat(arg.defaultValue, "')")
                : '';
            this.printAligned(arg.names[0], 2, alignment, arg.description + defaultText);
        }
        if (epilogue) {
            console.log('\n' + epilogue);
        }
    };
    ArgParser.prototype.getCommandLineUsage = function () {
        var names = [];
        var cmd = this.binary;
        for (var _i = 0, _a = this.optional; _i < _a.length; _i++) {
            var arg = _a[_i];
            names.push(this.getShortestName(arg));
        }
        if (names.length) {
            cmd += ' [' + names.join(',') + ']';
        }
        for (var _b = 0, _c = this.positional; _b < _c.length; _b++) {
            var arg = _c[_b];
            cmd += ' ' + arg.names[0];
        }
        return cmd;
    };
    ArgParser.prototype.printAligned = function (text, identLevel, alignment, posText) {
        if (identLevel === void 0) { identLevel = 2; }
        if (alignment === void 0) { alignment = 1; }
        var message = ''.padStart(identLevel, ' ')
            + text.padEnd(alignment, ' ')
            + (posText !== null && posText !== void 0 ? posText : '');
        console.log(message);
    };
    ArgParser.prototype.getShortestName = function (argument) {
        var shortest = argument.names[0];
        for (var _i = 0, _a = argument.names; _i < _a.length; _i++) {
            var name_1 = _a[_i];
            if (name_1.length < shortest.length) {
                shortest = name_1;
            }
        }
        return shortest;
    };
    ArgParser.prototype.isOptional = function (argument) {
        return argument.startsWith('-');
    };
    ArgParser.prototype.findOptionalArgument = function (name) {
        return this.optional.find(function (value) { return value.names.includes(name); });
        ;
    };
    ArgParser.prototype.parseArgName = function (names) {
        var name = names[0].replace(/\-+([a-z])?/gi, function (match, letter) {
            return letter.toUpperCase();
        });
        return name[0].toLowerCase() + name.slice(1);
    };
    return ArgParser;
}());
exports.ArgParser = ArgParser;
